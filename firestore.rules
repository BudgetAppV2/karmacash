rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    
    // Check if user is authenticated
    function isAuth() {
      return request.auth != null;
    }
    
    // Get the budget document (use cautiously due to read costs)
    function getBudget(budgetId) {
      return get(/databases/$(database)/documents/budgets/$(budgetId));
    }
    
    // Check if current user is a member of the budget (optimized for list operations)
    function isBudgetMember(budgetId) {
      return isAuth() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/budgetMemberships/$(budgetId));
    }
    
    // Alternative member check using budget document (for get operations where it's already loaded)
    function isBudgetMemberFromDoc(budgetId) {
      return isAuth() && 
        exists(/databases/$(database)/documents/budgets/$(budgetId)) && 
        request.auth.uid in get(/databases/$(database)/documents/budgets/$(budgetId)).data.members;
    }
    
    // Get the user's role in the budget
    function getBudgetMemberRole(budgetId) {
      return isBudgetMemberFromDoc(budgetId) ? 
        getBudget(budgetId).data.members[request.auth.uid].role : null;
    }
    
    // Check if current user is the budget owner
    function isBudgetOwner(budgetId) {
      return getBudgetMemberRole(budgetId) == 'owner';
    }
    
    // Check if current user is an editor or owner
    function isBudgetEditorOrOwner(budgetId) {
      let role = getBudgetMemberRole(budgetId);
      return role == 'editor' || role == 'owner';
    }
    
    // Check if data has all required fields
    function hasRequiredFields(data, fields) {
      return data.keys().hasAll(fields);
    }
    
    // --- Budget Collection ---
    match /budgets/{budgetId} {
      // Read: Any authenticated member of the budget
      allow get: if isBudgetMemberFromDoc(budgetId);
      allow list: if isBudgetMember(budgetId);
      
      // Create: Any authenticated user can create a budget if:
      // - They set themselves as owner
      // - They include themselves in the members map with owner role
      // - The budget has all required fields with valid types
      allow create: if 
        // Actual rule conditions
        isAuth() 
        && request.resource.data.ownerId == request.auth.uid
        && request.resource.data.members[request.auth.uid].role == 'owner'
        // Required fields validation
        && hasRequiredFields(request.resource.data, ['name', 'ownerId', 'members', 'currency', 'version', 'createdAt', 'updatedAt'])
        // Type validation
        && request.resource.data.name is string
        && request.resource.data.name.size() > 0
        && request.resource.data.name.size() <= 100
        && request.resource.data.ownerId is string
        && request.resource.data.members is map
        && request.resource.data.currency is string
        && request.resource.data.version is number
        && request.resource.data.createdAt is timestamp
        && request.resource.data.updatedAt is timestamp
        // Members map validation
        && request.resource.data.members[request.auth.uid] is map
        && request.resource.data.members[request.auth.uid].keys().hasAll(['role', 'displayName', 'email', 'joinedAt'])
        && request.resource.data.members[request.auth.uid].displayName is string
        && request.resource.data.members[request.auth.uid].email is string
        && request.resource.data.members[request.auth.uid].joinedAt is timestamp;

      // Update: Based on role and fields being modified
      allow update: if isAuth() && (
        // Owner can update any field
        isBudgetOwner(budgetId) || 
        // Editor can update non-critical fields
        (isBudgetEditorOrOwner(budgetId) && 
          !request.resource.data.diff(resource.data).affectedKeys().hasAny(['members', 'ownerId'])
        )
      );
      
      // Delete: Only the owner can delete a budget
      allow delete: if isBudgetOwner(budgetId);
      
      // --- Budget Subcollections ---
      
      // Categories Subcollection
      match /categories/{categoryId} {
        // Read: Any budget member can read categories
        allow get: if isBudgetMemberFromDoc(budgetId);
        allow list: if isBudgetMember(budgetId);
        
        // Create: Editors and owners can create, with validation
        allow create: if isBudgetEditorOrOwner(budgetId)
          // Creator must be set to current user
          && request.resource.data.createdByUserId == request.auth.uid
          // Required fields validation
          && hasRequiredFields(request.resource.data, 
              ['budgetId', 'name', 'type', 'createdByUserId', 'createdAt', 'updatedAt'])
          // Data validation
          && request.resource.data.budgetId == budgetId
          && request.resource.data.name is string
          && request.resource.data.name.size() > 0
          && request.resource.data.name.size() <= 50
          && request.resource.data.type in ['expense', 'income'];
        
        // Update: Editors and owners can update with validation
        allow update: if isBudgetEditorOrOwner(budgetId)
          // Set lastEditedByUserId to current user
          && request.resource.data.lastEditedByUserId == request.auth.uid
          // Cannot modify creation fields
          && request.resource.data.createdByUserId == resource.data.createdByUserId
          && request.resource.data.createdAt == resource.data.createdAt
          // Data validation
          && request.resource.data.budgetId == budgetId
          && request.resource.data.name is string
          && request.resource.data.name.size() > 0
          && request.resource.data.name.size() <= 50
          && request.resource.data.type in ['expense', 'income'];
        
        // Delete: Editors and owners can delete, except default categories (owner only)
        allow delete: if isBudgetEditorOrOwner(budgetId) && (
          // Non-default categories can be deleted by editors or owners
          !resource.data.isDefault || 
          // Default categories can only be deleted by the owner
          (resource.data.isDefault && isBudgetOwner(budgetId))
        );
      }
      
      // Transactions Subcollection
      match /transactions/{transactionId} {
        // Read: Any budget member can read transactions
        allow get: if isBudgetMemberFromDoc(budgetId);
        allow list: if isBudgetMember(budgetId);
        
        // Create/Update/Delete: Editors and owners can manage transactions
        allow create, update, delete: if isBudgetEditorOrOwner(budgetId);
      }
      
      // Recurring Rules Subcollection
      match /recurringRules/{ruleId} {
        // Read: Any budget member can read recurring rules
        allow get: if isBudgetMemberFromDoc(budgetId);
        allow list: if isBudgetMember(budgetId);
        
        // Create/Update/Delete: Editors and owners can manage rules
        allow create, update, delete: if isBudgetEditorOrOwner(budgetId);
      }
      
      // Monthly Data Subcollection
      match /monthlyData/{monthId} {
        // Read: Any budget member can read monthly data
        allow get: if isBudgetMemberFromDoc(budgetId);
        allow list: if isBudgetMember(budgetId);
        
        // Create/Update/Delete: Editors and owners can manage monthly data
        allow create, update, delete: if isBudgetEditorOrOwner(budgetId);
      }
    }
    
    // --- User Profiles ---
    match /users/{userId} {
      // Allow users to read and write their own profile document
      allow read, write: if isAuth() && request.auth.uid == userId;
      
      // Budget Memberships Subcollection
      match /budgetMemberships/{budgetId} {
        // Allow user to read their own memberships
        allow read: if isAuth() && request.auth.uid == userId;
        
        // Allow user to create their own budget membership during initial budget creation
        allow create: if isAuth() 
                      && request.auth.uid == userId // User creating their own membership doc
                      && request.resource.data.budgetId == budgetId // budgetId in doc matches path
                      && request.resource.data.role == 'owner' // Must be owner role
                      && request.resource.data.ownerId == request.auth.uid // ownerId field matches user
                      && request.resource.data.budgetName is string
                      && request.resource.data.budgetName.size() > 0
                      && request.resource.data.currency is string
                      && request.resource.data.joinedAt is timestamp;
        
        // Disallow direct updates from client
        allow update: if false;
        
        // Allow user to remove themselves from a budget (leave)
        allow delete: if isAuth() && request.auth.uid == userId;
      }
    }
    
    // --- Deny access to all other collections by default ---
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
