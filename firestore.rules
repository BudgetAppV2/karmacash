rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    
    // Check if user is authenticated
    function isAuth() {
      return request.auth != null;
    }
    
    // Get the budget document (use cautiously due to read costs)
    function getBudget(budgetId) {
      return get(/databases/$(database)/documents/budgets/$(budgetId));
    }
    
    // Check if current user is a member of the budget (optimized for list operations)
    function isBudgetMember(budgetId) {
      // First try to check if the user is authenticated
      return isAuth() && (
        // Primary check: Use denormalized membership data (efficient)
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/budgetMemberships/$(budgetId)) ||
        // Fallback check: Direct budget document check (less efficient but reliable)
        (
          exists(/databases/$(database)/documents/budgets/$(budgetId)) &&
          request.auth.uid in getBudget(budgetId).data.members
        )
      );
    }
    
    // Alternative member check using budget document (for get operations where it's already loaded)
    function isBudgetMemberFromDoc(budgetId) {
      return isAuth() && 
        exists(/databases/$(database)/documents/budgets/$(budgetId)) && 
        request.auth.uid in getBudget(budgetId).data.members;
    }
    
    // Get the user's role in the budget
    function getBudgetMemberRole(budgetId) {
      return isBudgetMemberFromDoc(budgetId) ? 
        getBudget(budgetId).data.members[request.auth.uid].role : null;
    }
    
    // Check if current user is the budget owner
    function isBudgetOwner(budgetId) {
      return getBudgetMemberRole(budgetId) == 'owner';
    }
    
    // Check if current user is an editor or owner
    function isBudgetEditorOrOwner(budgetId) {
      let role = getBudgetMemberRole(budgetId);
      return role == 'editor' || role == 'owner';
    }
    
    // Check if data has all required fields
    function hasRequiredFields(data, fields) {
      return data.keys().hasAll(fields);
    }

    // Validate transaction amount based on type
    function isValidTransactionAmount(data) {
      // Enforce correct amount sign based on transaction type
      return (data.type == 'expense' && data.amount < 0) || 
             (data.type == 'income' && data.amount > 0);
    }

    // Validate category type matches transaction type
    function categoryTypeMatchesTransaction(budgetId, categoryId, transactionType) {
      // Skip validation if category is not specified (null/empty)
      return categoryId == null || categoryId == '' || 
             // Otherwise, verify the category exists and has matching type
             (exists(/databases/$(database)/documents/budgets/$(budgetId)/categories/$(categoryId)) && 
              get(/databases/$(database)/documents/budgets/$(budgetId)/categories/$(categoryId)).data.type == transactionType);
    }
    
    // --- Budget Collection ---
    match /budgets/{budgetId} {
      // Read: Any authenticated member of the budget
      allow get: if isBudgetMemberFromDoc(budgetId);
      // For listing budgets, allow if user has any budget memberships
      allow list: if isAuth() && exists(/databases/$(database)/documents/users/$(request.auth.uid)/budgetMemberships);
      
      // Create: Any authenticated user can create a budget
      allow create: if 
        isAuth() 
        && request.resource.data.ownerId == request.auth.uid
        && request.resource.data.members[request.auth.uid].role == 'owner'
        && hasRequiredFields(request.resource.data, ['name', 'ownerId', 'members', 'currency', 'version', 'createdAt', 'updatedAt'])
        && request.resource.data.name is string
        && request.resource.data.name.size() > 0
        && request.resource.data.name.size() <= 100
        && request.resource.data.ownerId is string
        && request.resource.data.members is map
        && request.resource.data.currency is string
        && request.resource.data.version is number
        && request.resource.data.createdAt is timestamp
        && request.resource.data.updatedAt is timestamp
        && request.resource.data.members[request.auth.uid] is map
        && request.resource.data.members[request.auth.uid].keys().hasAll(['role', 'displayName', 'email', 'joinedAt'])
        && request.resource.data.members[request.auth.uid].displayName is string
        && request.resource.data.members[request.auth.uid].email is string
        && request.resource.data.members[request.auth.uid].joinedAt is timestamp;

      // Update: Based on role and fields being modified
      allow update: if isAuth() && (
        isBudgetOwner(budgetId) || 
        (isBudgetEditorOrOwner(budgetId) && 
          !request.resource.data.diff(resource.data).affectedKeys().hasAny(['members', 'ownerId'])
        )
      );
      
      // Delete: Only the owner can delete a budget
      allow delete: if isBudgetOwner(budgetId);
      
      // --- Budget Subcollections ---
      
      // Categories Subcollection
      match /categories/{categoryId} {
        // Read rules
        allow get: if isBudgetMember(budgetId);
        allow list: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/budgets/$(budgetId)).data.members;
        
        // Create: Editors and owners can create
        allow create: if isBudgetEditorOrOwner(budgetId)
          && request.resource.data.createdByUserId == request.auth.uid
          && hasRequiredFields(request.resource.data, [
              'budgetId', 'name', 'type', 'createdByUserId', 'createdAt', 'updatedAt',
              'color', 'order', 'isDefault'
          ])
          && request.resource.data.budgetId == budgetId
          && request.resource.data.name is string
          && request.resource.data.name.size() > 0
          && request.resource.data.name.size() <= 50
          && request.resource.data.type in ['expense', 'income']
          && request.resource.data.color is string
          && request.resource.data.order is number
          && request.resource.data.isDefault is bool;
        
        // Update: Editors and owners can update
        allow update: if isBudgetEditorOrOwner(budgetId)
          && request.resource.data.lastEditedByUserId == request.auth.uid
          && request.resource.data.createdByUserId == resource.data.createdByUserId
          && request.resource.data.createdAt == resource.data.createdAt
          && request.resource.data.budgetId == budgetId
          && request.resource.data.name is string
          && request.resource.data.name.size() > 0
          && request.resource.data.name.size() <= 50
          && request.resource.data.type == resource.data.type  // Cannot change category type
          && request.resource.data.color is string
          && request.resource.data.order is number;
        
        // Delete: Editors and owners can delete, except default categories
        allow delete: if isBudgetEditorOrOwner(budgetId) && (
          !resource.data.isDefault || 
          (resource.data.isDefault && isBudgetOwner(budgetId))
        );
      }
      
      // Transactions Subcollection
      match /transactions/{transactionId} {
        // Read rules
        allow get: if isBudgetMember(budgetId);
        allow list: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/budgets/$(budgetId)).data.members;
        
        // Create: Editors and owners can create with validation
        allow create: if isBudgetEditorOrOwner(budgetId)
          && request.resource.data.createdByUserId == request.auth.uid
          && hasRequiredFields(request.resource.data, [
              'budgetId', 'categoryId', 'type', 'amount', 'description', 
              'date', 'createdByUserId', 'createdAt', 'updatedAt',
              'isRecurringInstance', 'recurringRuleId'
          ])
          && request.resource.data.budgetId == budgetId
          && request.resource.data.type in ['expense', 'income']
          && isValidTransactionAmount(request.resource.data)
          && categoryTypeMatchesTransaction(
              budgetId, 
              request.resource.data.categoryId, 
              request.resource.data.type
          )
          && request.resource.data.description is string
          && request.resource.data.description.size() > 0
          && request.resource.data.description.size() <= 200
          && request.resource.data.date is timestamp
          && request.resource.data.isRecurringInstance is bool;
        
        // Update: Editors and owners can update with validation
        allow update: if isBudgetEditorOrOwner(budgetId)
          && request.resource.data.lastEditedByUserId == request.auth.uid
          && request.resource.data.createdByUserId == resource.data.createdByUserId
          && request.resource.data.createdAt == resource.data.createdAt
          && request.resource.data.budgetId == budgetId
          && request.resource.data.type in ['expense', 'income']
          && isValidTransactionAmount(request.resource.data)
          && categoryTypeMatchesTransaction(
              budgetId, 
              request.resource.data.categoryId, 
              request.resource.data.type
          )
          && request.resource.data.description is string
          && request.resource.data.description.size() > 0
          && request.resource.data.description.size() <= 200;
        
        // Delete: Editors and owners can delete
        allow delete: if isBudgetEditorOrOwner(budgetId);
      }
      
      // Recurring Rules Subcollection
      match /recurringRules/{ruleId} {
        // Read rules
        allow get: if isBudgetMember(budgetId);
        allow list: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/budgets/$(budgetId)).data.members;
        
        // Create: Editors and owners can create with validation
        allow create: if isBudgetEditorOrOwner(budgetId)
          && request.resource.data.createdByUserId == request.auth.uid
          && hasRequiredFields(request.resource.data, [
              'budgetId', 'categoryId', 'type', 'amount', 'description',
              'frequency', 'interval', 'startDate', 'isActive',
              'createdByUserId', 'createdAt', 'updatedAt'
          ])
          && request.resource.data.budgetId == budgetId
          && request.resource.data.type in ['expense', 'income']
          && isValidTransactionAmount(request.resource.data)
          && categoryTypeMatchesTransaction(
              budgetId, 
              request.resource.data.categoryId, 
              request.resource.data.type
          )
          && request.resource.data.description is string
          && request.resource.data.description.size() > 0
          && request.resource.data.description.size() <= 200
          && request.resource.data.frequency in ['daily', 'weekly', 'bi-weekly', 'monthly', 'annual']
          && request.resource.data.interval > 0
          && request.resource.data.startDate is timestamp
          && request.resource.data.isActive is bool;
        
        // Update: Editors and owners can update with validation
        allow update: if isBudgetEditorOrOwner(budgetId)
          && request.resource.data.lastEditedByUserId == request.auth.uid
          && request.resource.data.createdByUserId == resource.data.createdByUserId
          && request.resource.data.createdAt == resource.data.createdAt
          && request.resource.data.budgetId == budgetId
          && request.resource.data.type in ['expense', 'income']
          && isValidTransactionAmount(request.resource.data)
          && categoryTypeMatchesTransaction(
              budgetId, 
              request.resource.data.categoryId, 
              request.resource.data.type
          )
          && request.resource.data.description is string
          && request.resource.data.description.size() > 0
          && request.resource.data.description.size() <= 200
          && request.resource.data.frequency in ['daily', 'weekly', 'bi-weekly', 'monthly', 'annual']
          && request.resource.data.interval > 0
          && request.resource.data.startDate is timestamp
          && request.resource.data.isActive is bool;
        
        // Delete: Editors and owners can delete
        allow delete: if isBudgetEditorOrOwner(budgetId);
      }
      
      // Monthly Data Subcollection
      match /monthlyData/{monthId} {
        // Remove temporary debug rules and restore secure rules
        allow get: if isBudgetMember(budgetId);
        allow list: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/budgets/$(budgetId)).data.members;
        
        // Write: Editors and owners can manage monthly data
        allow create, update, delete: if isBudgetEditorOrOwner(budgetId)
          && request.resource.data.budgetId == budgetId;  // Ensure budgetId matches
      }
    }
    
    // --- User Profiles ---
    match /users/{userId} {
      // Allow users to read and write their own profile document
      allow get: if isAuth() && request.auth.uid == userId;
      allow list: if false; // Users should not be listable
      
      // Allow users to create their own document
      allow create: if isAuth() 
                    && request.auth.uid == userId
                    && request.resource.data.keys().hasAll(['email', 'displayName', 'createdAt'])
                    && request.resource.data.email is string
                    && request.resource.data.displayName is string
                    && request.resource.data.createdAt is timestamp;
      
      // Budget Memberships Subcollection
      match /budgetMemberships/{budgetId} {
        // Allow user to read their own memberships
        allow get, list: if isAuth() && request.auth.uid == userId;
        
        // Allow user to create their own budget membership during initial budget creation
        allow create: if isAuth() 
                      && request.auth.uid == userId
                      && request.resource.data.budgetId == budgetId
                      && request.resource.data.role == 'owner'
                      && request.resource.data.ownerId == request.auth.uid
                      && request.resource.data.budgetName is string
                      && request.resource.data.budgetName.size() > 0
                      && request.resource.data.currency is string
                      && request.resource.data.joinedAt is timestamp;
        
        // Disallow direct updates from client
        allow update: if false;
        
        // Allow user to remove themselves from a budget (leave)
        allow delete: if isAuth() && request.auth.uid == userId;
      }
    }
    
    // --- Deny access to all other collections by default ---
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
