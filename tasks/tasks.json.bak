{
  "tasks": [
    {
      "id": 201,
      "title": "M5.1.1 - Amélioration du \"Reste à Allouer\" avec validation préventive",
      "priority": "Haute",
      "dependencies": [],
      "description": "Implémenter une validation côté client pour empêcher que le \"Reste à Allouer\" ne devienne négatif lors de la saisie d'une allocation individuelle, avec un retour visuel approprié pour guider l'utilisateur.",
      "details": "- Analyser le code existant de validation des entrées et de calcul du \"Reste à Allouer\"\n- Implémenter une logique de validation préventive qui empêche les entrées qui rendraient le \"Reste à Allouer\" négatif\n- Développer un mécanisme de plafonnement des valeurs d'entrée au maximum disponible\n- Créer des indicateurs visuels subtils (bordure rouge douce selon Bible [B3.8]) lorsqu'une entrée dépasse la limite\n- Implémenter des messages d'explication clairs et non alarmants (selon Bible [B3.4])\n- Ajouter des indices visuels lorsque le \"Reste à Allouer\" approche de zéro\n- Assurer que la validation se fait en temps réel pendant la saisie utilisateur\n- Prioriser la rigueur budgétaire tout en maintenant une expérience utilisateur fluide et non restrictive",
      "mockupDesignNeeded": "Oui - Maquette simple pour les états visuels d'erreur et d'avertissement des champs de saisie, ainsi que pour l'indicateur de \"Reste à Allouer\" approchant zéro.",
      "testStrategy": "- Tester la saisie de valeurs valides et invalides dans différentes catégories\n- Vérifier que le plafonnement fonctionne correctement sans permettre de dépasser le montant disponible\n- Confirmer que les retours visuels sont clairs mais non intrusifs\n- Tester différents scénarios de montants (petits, grands, décimaux)\n- Vérifier la réactivité de l'interface lors des validations en temps réel",
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 202,
      "title": "M5.1.2 - Implémentation des curseurs d'allocation interactifs",
      "priority": "Haute",
      "dependencies": [
        201
      ],
      "description": "Développer et intégrer des curseurs d'allocation qui complètent les champs de saisie numérique, permettant une allocation visuelle et intuitive du budget avec synchronisation bidirectionnelle.",
      "details": "- Concevoir l'apparence visuelle des curseurs en accord avec le thème \"Zen/Tranquillité\" du Bible [B3.4]\n- Développer les composants de curseurs avec plage dynamique (0 à maximum disponible pour chaque catégorie)\n- Implémenter la logique de calcul du maximum disponible pour chaque catégorie en fonction du \"Reste à Allouer\"\n- Développer la synchronisation en temps réel entre curseurs et champs de saisie numérique\n- Assurer que les modifications par curseur ou par saisie directe sont parfaitement synchronisées\n- Implémenter la navigation au clavier (touches fléchées) pour l'accessibilité\n- Ajouter les attributs ARIA appropriés pour les lecteurs d'écran\n- Optimiser les cibles tactiles selon les directives du Bible [B3.4]\n- Configurer des incréments sensibles (1, 5, 10 unités monétaires) selon le contexte\n- S'inspirer de l'exemple de la Banque Nationale pour la fluidité et la réactivité",
      "mockupDesignNeeded": "Oui - Maquettes détaillées pour l'apparence des curseurs, leurs états (repos, focus, actif, désactivé), et leur comportement lors des interactions.",
      "testStrategy": "- Tester la synchronisation bidirectionnelle entre curseurs et champs de saisie\n- Vérifier l'accessibilité avec différents outils d'assistance (navigation clavier, lecteurs d'écran)\n- Confirmer que les curseurs respectent les contraintes de taille des cibles tactiles\n- Tester la fluidité et la réactivité sur différents appareils (desktop, mobile)\n- Vérifier que les incréments sont appropriés et que l'expérience utilisateur est intuitive",
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Design the visual appearance of the allocation sliders in line with the \"Zen/Tranquility\" theme per [B3.4]",
          "description": "Create the visual design for the allocation sliders that aligns with the \"Zen/Tranquility\" theme as per the guidelines in [B3.4].",
          "dependencies": [],
          "details": "The visual design should incorporate calming and serene elements to match the overall theme. Ensure the sliders, labels, and other UI components are visually appealing and consistent with the brand identity.",
          "status": "pending"
        },
        {
          "id": 2,
          "title": "Develop the slider components with dynamic range (0 to maximum available for each category)",
          "description": "Implement the slider components with a dynamic range that adjusts based on the maximum available value for each category.",
          "dependencies": [
            1
          ],
          "details": "The slider range should be from 0 to the maximum available value for each allocation category. The maximum available value should be determined based on the \"Reste à Allouer\" calculation.",
          "status": "pending"
        },
        {
          "id": 3,
          "title": "Implement the logic to calculate the maximum available for each category based on the \"Reste à Allouer\"",
          "description": "Develop the logic to determine the maximum available value for each allocation category based on the \"Reste à Allouer\".",
          "dependencies": [
            2
          ],
          "details": "The maximum available value for each category should be calculated dynamically based on the remaining amount to allocate (\"Reste à Allouer\"). This value should be used to set the range of the sliders.",
          "status": "pending"
        },
        {
          "id": 4,
          "title": "Develop real-time synchronization between sliders and numeric input fields",
          "description": "Ensure that changes made to the sliders are immediately reflected in the corresponding numeric input fields, and vice versa.",
          "dependencies": [
            2,
            3
          ],
          "details": "Implement the necessary logic to keep the sliders and numeric input fields in sync, so that any modifications made to one are instantly reflected in the other.",
          "status": "pending"
        },
        {
          "id": 5,
          "title": "Ensure that modifications via sliders or direct input are perfectly synchronized",
          "description": "Guarantee that any changes made to the allocation values, whether through the sliders or direct input, are seamlessly synchronized across all UI elements.",
          "dependencies": [
            4
          ],
          "details": "Develop robust mechanisms to ensure that any updates to the allocation values, whether made through the sliders or by directly editing the numeric inputs, are instantly reflected across the entire interface.",
          "status": "pending"
        },
        {
          "id": 6,
          "title": "Implement keyboard navigation (arrow keys) for accessibility",
          "description": "Provide keyboard navigation functionality using the arrow keys to allow users to adjust the allocation values.",
          "dependencies": [
            4,
            5
          ],
          "details": "Ensure that users can navigate and adjust the allocation values using the keyboard, specifically the arrow keys, to improve accessibility and usability.",
          "status": "pending"
        },
        {
          "id": 7,
          "title": "Add appropriate ARIA attributes for screen readers",
          "description": "Incorporate ARIA (Accessible Rich Internet Applications) attributes to enhance the accessibility of the allocation sliders for screen reader users.",
          "dependencies": [
            6
          ],
          "details": "Identify and add the necessary ARIA attributes to the slider components and related UI elements to ensure they are properly recognized and interpreted by screen readers, providing a seamless experience for users with visual impairments.",
          "status": "pending"
        },
        {
          "id": 8,
          "title": "Optimize touch targets according to [B3.4] guidelines",
          "description": "Ensure the touch targets for the allocation sliders and related UI elements meet the guidelines specified in [B3.4].",
          "dependencies": [
            7
          ],
          "details": "Review the touch target sizes and spacing of the allocation sliders and related UI components to ensure they adhere to the guidelines outlined in [B3.4], providing an optimal touch-based experience.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 203,
      "title": "M5.1.3 - Intégration et coordination des composants de budgétisation",
      "priority": "Haute",
      "dependencies": [
        201,
        202
      ],
      "description": "Assurer l'intégration harmonieuse entre la validation du \"Reste à Allouer\" et les curseurs d'allocation, garantissant une expérience utilisateur cohérente et fluide lors des interactions avec le budget.",
      "details": "- Coordonner les validations du \"Reste à Allouer\" avec le comportement des curseurs d'allocation\n- Implémenter la mise à jour dynamique des plages maximales des curseurs en fonction du \"Reste à Allouer\" en temps réel\n- Assurer que les modifications d'une catégorie affectent correctement les plages disponibles pour les autres catégories\n- Développer une logique côté client pour garantir la cohérence des données entre tous les composants\n- Optimiser les calculs en temps réel pour éviter les ralentissements (debouncing/throttling si nécessaire)\n- Gérer les états intermédiaires lors des ajustements multiples pour une expérience fluide\n- Assurer que les validations et les contraintes s'appliquent de manière cohérente, que l'utilisateur interagisse via les curseurs ou les champs de saisie\n- Implémenter une gestion efficace des événements pour minimiser les recalculs inutiles",
      "mockupDesignNeeded": "Non - Cette tâche concerne principalement l'intégration technique et le comportement dynamique.",
      "testStrategy": "- Tester les interactions combinées entre curseurs et champs de saisie\n- Vérifier que les contraintes du \"Reste à Allouer\" sont correctement reflétées dans les plages des curseurs\n- Tester des scénarios d'allocation complexes impliquant plusieurs catégories\n- Évaluer les performances lors d'ajustements rapides et multiples\n- Confirmer que l'expérience utilisateur reste fluide et intuitive dans tous les scénarios d'utilisation",
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Coordinate the \"Reste à Allouer\" validations with the behavior of the allocation sliders",
          "description": "Ensure that the \"Reste à Allouer\" validations are properly integrated with the allocation sliders, so that changes in one component are reflected in the other.",
          "dependencies": [],
          "details": "This includes implementing the necessary logic to synchronize the \"Reste à Allouer\" values with the slider positions and ranges.",
          "status": "pending"
        },
        {
          "id": 2,
          "title": "Implement the dynamic update of the slider maximum ranges based on the real-time \"Reste à Allouer\"",
          "description": "Develop the functionality to dynamically update the maximum ranges of the allocation sliders based on the current \"Reste à Allouer\" values.",
          "dependencies": [
            1
          ],
          "details": "This will ensure that the sliders always reflect the available budget for each category.",
          "status": "pending"
        },
        {
          "id": 3,
          "title": "Ensure that changes in one category correctly affect the available ranges for other categories",
          "description": "Implement the logic to propagate changes in one category's allocation to the available ranges for other categories.",
          "dependencies": [
            1,
            2
          ],
          "details": "This will maintain data consistency and prevent invalid allocations across the different categories.",
          "status": "pending"
        },
        {
          "id": 4,
          "title": "Develop client-side logic to guarantee data consistency across all components",
          "description": "Implement the necessary client-side logic to ensure that the data remains consistent across all the budgeting components.",
          "dependencies": [
            1,
            2,
            3
          ],
          "details": "This includes handling edge cases, validating user inputs, and maintaining the integrity of the overall budgeting system.",
          "status": "pending"
        },
        {
          "id": 5,
          "title": "Optimize real-time calculations to avoid slowdowns (debouncing/throttling if necessary)",
          "description": "Optimize the performance of the real-time calculations and updates to prevent slowdowns in the user experience.",
          "dependencies": [
            1,
            2,
            3,
            4
          ],
          "details": "Implement techniques like debouncing or throttling to manage the frequency of updates and calculations.",
          "status": "pending"
        },
        {
          "id": 6,
          "title": "Manage intermediate states during multiple adjustments for a fluid experience",
          "description": "Develop the logic to handle and manage the intermediate states during multiple adjustments to the budget allocations.",
          "dependencies": [
            1,
            2,
            3,
            4,
            5
          ],
          "details": "This will ensure a smooth and responsive user experience, even when the user is making multiple changes.",
          "status": "pending"
        },
        {
          "id": 7,
          "title": "Implement efficient event handling to minimize unnecessary recalculations",
          "description": "Implement efficient event handling mechanisms to minimize the number of unnecessary recalculations and updates.",
          "dependencies": [
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "details": "This will further optimize the performance and responsiveness of the budgeting system.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 204,
      "title": "M5.1.4 - Révision de la logique backend pour la sauvegarde des allocations",
      "priority": "Moyenne",
      "dependencies": [
        203
      ],
      "description": "Examiner et améliorer la robustesse de la logique de sauvegarde des allocations budgétaires, en assurant l'intégrité des données et un retour visuel approprié pour l'utilisateur.",
      "details": "- Auditer le code existant de sauvegarde des allocations\n- Identifier les points de vulnérabilité ou d'amélioration dans la logique actuelle\n- Renforcer les validations de structure et d'intégrité des données (valeurs numériques valides, IDs de catégories corrects)\n- Optimiser le processus de sauvegarde manuelle via le bouton \"Sauvegarder\"\n- Implémenter un mécanisme de vérification des données avant envoi au serveur\n- Développer un indicateur de chargement sur le bouton de sauvegarde pendant le processus\n- Implémenter des notifications Toast pour succès/échec selon Bible [B3.7] et [B3.11]\n- Documenter les améliorations apportées et les validations implémentées\n- Noter les considérations futures pour la gestion des conflits (pertinent pour la fonctionnalité \"Budgets Partagés\" post-MVP)",
      "mockupDesignNeeded": "Non - Utiliser les styles existants pour les indicateurs de chargement et les notifications Toast définis dans le Bible [B3.7].",
      "testStrategy": "- Tester le processus de sauvegarde avec différentes configurations d'allocations\n- Vérifier la robustesse face à des données mal formatées ou invalides\n- Confirmer que les retours visuels (chargement, succès, échec) fonctionnent correctement\n- Tester les scénarios d'erreur réseau et de timeout\n- Valider que les données sauvegardées correspondent exactement aux allocations définies par l'utilisateur",
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 205,
      "title": "M5.1.5 - Clarification UI pour le calcul des \"Fonds Disponibles\"",
      "priority": "Moyenne",
      "dependencies": [],
      "description": "Améliorer la clarté de l'interface concernant le calcul des \"Fonds Disponibles\", en particulier dans le contexte où la fonctionnalité de bascule des dépenses récurrentes pourrait être reportée.",
      "details": "- Rédiger un contenu explicatif clair détaillant la formule de calcul : (Revenu total du mois) - (Somme des dépenses récurrentes) + (Report du mois précédent)\n- Concevoir une infobulle (tooltip) selon les directives du Bible [B3.8]\n- Ajouter une icône d'information (Heroicon) à côté de l'affichage des \"Fonds Disponibles\"\n- Implémenter l'interaction pour afficher l'infobulle au survol/clic sur l'icône\n- Assurer que l'explication est accessible et compréhensible pour tous les utilisateurs\n- Optimiser l'affichage de l'infobulle sur les appareils mobiles et desktop\n- Vérifier que l'explication reste valide même si la fonctionnalité de bascule des dépenses récurrentes est reportée\n- S'assurer que l'infobulle ne perturbe pas l'expérience utilisateur globale (taille appropriée, positionnement intelligent)",
      "mockupDesignNeeded": "Oui - Design de l'infobulle et de son positionnement par rapport à l'affichage des \"Fonds Disponibles\".",
      "testStrategy": "- Vérifier que l'infobulle s'affiche correctement au survol/clic sur l'icône d'information\n- Tester la lisibilité et la clarté du contenu explicatif\n- Confirmer l'accessibilité de l'infobulle (navigation clavier, lecteurs d'écran)\n- Tester l'affichage sur différentes tailles d'écran et orientations\n- Valider que l'explication correspond bien au calcul réel effectué par l'application",
      "status": "pending",
      "subtasks": []
    }
  ]
}